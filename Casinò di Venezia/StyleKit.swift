//
//  StyleKit.swift
//  CasinoVenezia
//
//  Created by Massimo Moro on 05/02/2018.
//  Copyright Â© 2018 CMV Gioco Spa. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawIconaDove(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100)) {
        //// Color Declarations
        let fillColor = UIColor(red: 0.518, green: 0.459, blue: 0.322, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.21761 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.50885 * frame.width, y: frame.minY + 0.21761 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.38227 * frame.width, y: frame.minY + 0.34465 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.43895 * frame.width, y: frame.minY + 0.21761 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.38227 * frame.width, y: frame.minY + 0.27449 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.50885 * frame.width, y: frame.minY + 0.47170 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.38227 * frame.width, y: frame.minY + 0.41482 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.43895 * frame.width, y: frame.minY + 0.47170 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.34465 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57876 * frame.width, y: frame.minY + 0.47170 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.41482 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.63541 * frame.width, y: frame.minY + 0.34244 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.34391 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.34317 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.34465 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.51106 * frame.width, y: frame.minY + 0.21763 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63543 * frame.width, y: frame.minY + 0.27535 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.58010 * frame.width, y: frame.minY + 0.21884 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.21761 * frame.height))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.43532 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.43532 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.42060 * frame.width, y: frame.minY + 0.34585 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.46051 * frame.width, y: frame.minY + 0.43532 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42060 * frame.width, y: frame.minY + 0.39526 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.25638 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.42060 * frame.width, y: frame.minY + 0.29644 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.46051 * frame.width, y: frame.minY + 0.25638 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.59889 * frame.width, y: frame.minY + 0.34585 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.55898 * frame.width, y: frame.minY + 0.25638 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59889 * frame.width, y: frame.minY + 0.29644 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.59889 * frame.width, y: frame.minY + 0.34585 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.50974 * frame.width, y: frame.minY + 0.43532 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59889 * frame.width, y: frame.minY + 0.39526 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.55898 * frame.width, y: frame.minY + 0.43532 * frame.height))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.75161 * frame.width, y: frame.minY + 0.10190 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.75161 * frame.width, y: frame.minY + 0.10190 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.26164 * frame.width, y: frame.minY + 0.10190 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.61631 * frame.width, y: frame.minY + -0.03390 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39694 * frame.width, y: frame.minY + -0.03390 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.22895 * frame.width, y: frame.minY + 0.59039 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.14040 * frame.width, y: frame.minY + 0.22328 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.12525 * frame.width, y: frame.minY + 0.45202 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.50648 * frame.width, y: frame.minY + 0.99300 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.78400 * frame.width, y: frame.minY + 0.59099 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.75191 * frame.width, y: frame.minY + 0.10160 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.88800 * frame.width, y: frame.minY + 0.45202 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.87314 * frame.width, y: frame.minY + 0.22328 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.75161 * frame.width, y: frame.minY + 0.10190 * frame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.75459 * frame.width, y: frame.minY + 0.57012 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.50677 * frame.width, y: frame.minY + 0.92799 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.25807 * frame.width, y: frame.minY + 0.56922 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.28719 * frame.width, y: frame.minY + 0.12755 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.16418 * frame.width, y: frame.minY + 0.44367 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17784 * frame.width, y: frame.minY + 0.23849 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.28632 * frame.width, y: frame.minY + 0.12842 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.72544 * frame.width, y: frame.minY + 0.12842 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40758 * frame.width, y: frame.minY + 0.00671 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.60418 * frame.width, y: frame.minY + 0.00671 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.75429 * frame.width, y: frame.minY + 0.57012 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.83392 * frame.width, y: frame.minY + 0.23729 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.84729 * frame.width, y: frame.minY + 0.44367 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.75459 * frame.width, y: frame.minY + 0.57012 * frame.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIconaQuando(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100)) {
        //// Color Declarations
        let fillColor = UIColor(red: 0.518, green: 0.459, blue: 0.322, alpha: 1.000)
        let strokeColor = UIColor(red: 0.518, green: 0.459, blue: 0.322, alpha: 1.000)


        //// Subframes
        let livello_2: CGRect = CGRect(x: frame.minX + 3.13, y: frame.minY + 2.13, width: frame.width - 6.04, height: frame.height - 6.04)


        //// Livello_2
        //// Livello_1-2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height))
        bezierPath.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.00000 * livello_2.width, y: livello_2.minY + 0.50000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.22386 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.00000 * livello_2.width, y: livello_2.minY + 0.22386 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 1.00000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.00000 * livello_2.width, y: livello_2.minY + 0.77614 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.22386 * livello_2.width, y: livello_2.minY + 1.00000 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 1.00000 * livello_2.width, y: livello_2.minY + 0.50000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.77614 * livello_2.width, y: livello_2.minY + 1.00000 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 1.00000 * livello_2.width, y: livello_2.minY + 0.77614 * livello_2.height))
        bezierPath.addLine(to: CGPoint(x: livello_2.minX + 1.00000 * livello_2.width, y: livello_2.minY + 0.50059 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.49941 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 1.00000 * livello_2.width, y: livello_2.minY + 0.22412 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.77588 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height))
        bezierPath.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.00000 * livello_2.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.96698 * livello_2.height))
        bezierPath.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.96698 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.03302 * livello_2.width, y: livello_2.minY + 0.50000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.24209 * livello_2.width, y: livello_2.minY + 0.96698 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.03302 * livello_2.width, y: livello_2.minY + 0.75791 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.03302 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.03302 * livello_2.width, y: livello_2.minY + 0.24209 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.24209 * livello_2.width, y: livello_2.minY + 0.03302 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.96698 * livello_2.width, y: livello_2.minY + 0.50000 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.75791 * livello_2.width, y: livello_2.minY + 0.03302 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.96698 * livello_2.width, y: livello_2.minY + 0.24209 * livello_2.height))
        bezierPath.addLine(to: CGPoint(x: livello_2.minX + 0.96698 * livello_2.width, y: livello_2.minY + 0.50000 * livello_2.height))
        bezierPath.addCurve(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.96698 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.96698 * livello_2.width, y: livello_2.minY + 0.75791 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.75791 * livello_2.width, y: livello_2.minY + 0.96698 * livello_2.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 0.5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.09965 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.09965 * livello_2.height))
        bezier2Path.addCurve(to: CGPoint(x: livello_2.minX + 0.48349 * livello_2.width, y: livello_2.minY + 0.11616 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.49088 * livello_2.width, y: livello_2.minY + 0.09965 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.48349 * livello_2.width, y: livello_2.minY + 0.10704 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.48349 * livello_2.width, y: livello_2.minY + 0.49941 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.23290 * livello_2.width, y: livello_2.minY + 0.49941 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.23290 * livello_2.width, y: livello_2.minY + 0.49941 * livello_2.height))
        bezier2Path.addCurve(to: CGPoint(x: livello_2.minX + 0.21610 * livello_2.width, y: livello_2.minY + 0.51621 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.22362 * livello_2.width, y: livello_2.minY + 0.49941 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.21610 * livello_2.width, y: livello_2.minY + 0.50693 * livello_2.height))
        bezier2Path.addCurve(to: CGPoint(x: livello_2.minX + 0.23290 * livello_2.width, y: livello_2.minY + 0.53302 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.21610 * livello_2.width, y: livello_2.minY + 0.52550 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.22362 * livello_2.width, y: livello_2.minY + 0.53302 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.53302 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.53302 * livello_2.height))
        bezier2Path.addCurve(to: CGPoint(x: livello_2.minX + 0.51651 * livello_2.width, y: livello_2.minY + 0.51651 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.50912 * livello_2.width, y: livello_2.minY + 0.53302 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.51651 * livello_2.width, y: livello_2.minY + 0.52563 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.51651 * livello_2.width, y: livello_2.minY + 0.11616 * livello_2.height))
        bezier2Path.addLine(to: CGPoint(x: livello_2.minX + 0.51651 * livello_2.width, y: livello_2.minY + 0.11616 * livello_2.height))
        bezier2Path.addCurve(to: CGPoint(x: livello_2.minX + 0.50000 * livello_2.width, y: livello_2.minY + 0.09965 * livello_2.height), controlPoint1: CGPoint(x: livello_2.minX + 0.51651 * livello_2.width, y: livello_2.minY + 0.10704 * livello_2.height), controlPoint2: CGPoint(x: livello_2.minX + 0.50912 * livello_2.width, y: livello_2.minY + 0.09965 * livello_2.height))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0.5
        bezier2Path.stroke()
    }

    @objc dynamic public class func drawEvents(frame: CGRect = CGRect(x: 0, y: 72, width: 28, height: 28)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let fillColor = UIColor(red: 0.518, green: 0.459, blue: 0.322, alpha: 1.000)

        //// Image Declarations
        let calendar = UIImage(named: "calendar.png")!


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 2.5, y: frame.minY + 0.5, width: frame.width - 2.66, height: frame.height - 1)


        //// Group
        //// Rectangle 2 Drawing
        let rectangle2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.15788 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.27629 + 0.5) - fastFloor(group.width * 0.15788 + 0.5), height: fastFloor(group.height * 0.18519 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.translateBy(x: floor(rectangle2Rect.minX + 0.5), y: floor(rectangle2Rect.minY - 898 + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -calendar.size.height)
        context.draw(calendar.cgImage!, in: CGRect(x: 0, y: 0, width: calendar.size.width, height: calendar.size.height))
        context.restoreGState()
        fillColor.setStroke()
        rectangle2Path.lineWidth = 0.5
        rectangle2Path.lineJoinStyle = .round
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Rect = CGRect(x: group.minX + fastFloor(group.width * 0.71047 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.78941 + 0.5) - fastFloor(group.width * 0.71047 + 0.5), height: fastFloor(group.height * 0.18519 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.translateBy(x: floor(rectangle3Rect.minX + 0.5), y: floor(rectangle3Rect.minY - 898 + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -calendar.size.height)
        context.draw(calendar.cgImage!, in: CGRect(x: 0, y: 0, width: calendar.size.width, height: calendar.size.height))
        context.restoreGState()
        fillColor.setStroke()
        rectangle3Path.lineWidth = 0.5
        rectangle3Path.lineJoinStyle = .round
        rectangle3Path.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Rect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.07865 + 0.38) + 0.12, width: fastFloor(group.width * 0.94006 - 0.32) - fastFloor(group.width * 0.00000 + 0.5) + 0.82, height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.07865 + 0.38) - 0.12)
        let rectangle4Path = UIBezierPath()
        rectangle4Path.move(to: CGPoint(x: group.minX + 0.94006 * group.width, y: group.minY + 0.54054 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.93440 * group.width, y: group.minY + 0.08434 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.83613 * group.width, y: group.minY + 0.08434 * group.height))
        rectangle4Path.move(to: CGPoint(x: group.minX + 0.09382 * group.width, y: group.minY + 0.08108 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.08108 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 1.00000 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 1.00000 * group.height))
        rectangle4Path.move(to: CGPoint(x: group.minX + 0.67180 * group.width, y: group.minY + 0.07865 * group.height))
        rectangle4Path.addLine(to: CGPoint(x: group.minX + 0.27799 * group.width, y: group.minY + 0.07865 * group.height))
        context.saveGState()
        rectangle4Path.addClip()
        context.translateBy(x: floor(rectangle4Rect.minX + 0.5), y: floor(rectangle4Rect.minY - 852.12 + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -calendar.size.height)
        context.draw(calendar.cgImage!, in: CGRect(x: 0, y: 0, width: calendar.size.width, height: calendar.size.height))
        context.restoreGState()
        fillColor.setStroke()
        rectangle4Path.lineWidth = 0.5
        rectangle4Path.lineCapStyle = .round
        rectangle4Path.lineJoinStyle = .round
        rectangle4Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Rect = CGRect(x: group.minX + fastFloor(group.width * 0.01382 + 0.15) + 0.35, y: group.minY + fastFloor(group.height * 0.24321 - 0.07) + 0.57, width: fastFloor(group.width * 0.94006 - 0.32) - fastFloor(group.width * 0.01382 + 0.15) + 0.47, height: fastFloor(group.height * 0.24324 - 0.07) - fastFloor(group.height * 0.24321 - 0.07) + 0)
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: group.minX + 0.01382 * group.width, y: group.minY + 0.24324 * group.height))
        bezier6Path.addCurve(to: CGPoint(x: group.minX + 0.94006 * group.width, y: group.minY + 0.24324 * group.height), controlPoint1: CGPoint(x: group.minX + 0.08432 * group.width, y: group.minY + 0.24324 * group.height), controlPoint2: CGPoint(x: group.minX + 0.94006 * group.width, y: group.minY + 0.24324 * group.height))
        context.saveGState()
        bezier6Path.addClip()
        context.translateBy(x: floor(bezier6Rect.minX + 0.5), y: floor(bezier6Rect.minY - 936 + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -calendar.size.height)
        context.draw(calendar.cgImage!, in: CGRect(x: 0, y: 0, width: calendar.size.width, height: calendar.size.height))
        context.restoreGState()
        fillColor.setStroke()
        bezier6Path.lineWidth = 0.5
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Rect = CGRect(x: group.minX + fastFloor(group.width * 0.13824 - 0) + 0.5, y: group.minY + fastFloor(group.height * 0.37838 + 0.28) + 0.22, width: fastFloor(group.width * 0.81079 - 0.04) - fastFloor(group.width * 0.13824 - 0) + 0.04, height: fastFloor(group.height * 0.87643 - 0.16) - fastFloor(group.height * 0.37838 + 0.28) + 0.45)
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: group.minX + 0.81079 * group.width, y: group.minY + 0.53799 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.81079 * group.width, y: group.minY + 0.38199 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.13824 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.13824 * group.width, y: group.minY + 0.86300 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.86300 * group.height))
        bezier7Path.move(to: CGPoint(x: group.minX + 0.31796 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.addCurve(to: CGPoint(x: group.minX + 0.31796 * group.width, y: group.minY + 0.87640 * group.height), controlPoint1: CGPoint(x: group.minX + 0.31796 * group.width, y: group.minY + 0.88764 * group.height), controlPoint2: CGPoint(x: group.minX + 0.31796 * group.width, y: group.minY + 0.87640 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.31796 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.close()
        bezier7Path.move(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.addCurve(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.87640 * group.height), controlPoint1: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.88782 * group.height), controlPoint2: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.87640 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.close()
        bezier7Path.move(to: CGPoint(x: group.minX + 0.64975 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.64975 * group.width, y: group.minY + 0.55260 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.64975 * group.width, y: group.minY + 0.37838 * group.height))
        bezier7Path.close()
        bezier7Path.move(to: CGPoint(x: group.minX + 0.13824 * group.width, y: group.minY + 0.53920 * group.height))
        bezier7Path.addCurve(to: CGPoint(x: group.minX + 0.81079 * group.width, y: group.minY + 0.53799 * group.height), controlPoint1: CGPoint(x: group.minX + 0.81691 * group.width, y: group.minY + 0.53920 * group.height), controlPoint2: CGPoint(x: group.minX + 0.81079 * group.width, y: group.minY + 0.53799 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.13824 * group.width, y: group.minY + 0.53920 * group.height))
        bezier7Path.close()
        bezier7Path.move(to: CGPoint(x: group.minX + 0.15207 * group.width, y: group.minY + 0.70002 * group.height))
        bezier7Path.addCurve(to: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.70002 * group.height), controlPoint1: CGPoint(x: group.minX + 0.13824 * group.width, y: group.minY + 0.70002 * group.height), controlPoint2: CGPoint(x: group.minX + 0.48386 * group.width, y: group.minY + 0.70002 * group.height))
        bezier7Path.addLine(to: CGPoint(x: group.minX + 0.15207 * group.width, y: group.minY + 0.70002 * group.height))
        bezier7Path.close()
        context.saveGState()
        bezier7Path.addClip()
        context.translateBy(x: floor(bezier7Rect.minX + 0.5), y: floor(bezier7Rect.minY - 922.55 + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -calendar.size.height)
        context.draw(calendar.cgImage!, in: CGRect(x: 0, y: 0, width: calendar.size.width, height: calendar.size.height))
        context.restoreGState()
        fillColor.setStroke()
        bezier7Path.lineWidth = 0.5
        bezier7Path.lineCapStyle = .square
        bezier7Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.67049 * group.width, y: group.minY + 0.91216 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.57941 * group.width, y: group.minY + 0.66186 * group.height), controlPoint1: CGPoint(x: group.minX + 0.57342 * group.width, y: group.minY + 0.84209 * group.height), controlPoint2: CGPoint(x: group.minX + 0.51198 * group.width, y: group.minY + 0.75413 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.72154 * group.width, y: group.minY + 0.63150 * group.height), controlPoint1: CGPoint(x: group.minX + 0.62106 * group.width, y: group.minY + 0.61201 * group.height), controlPoint2: CGPoint(x: group.minX + 0.68024 * group.width, y: group.minY + 0.60644 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.77763 * group.width, y: group.minY + 0.69667 * group.height), controlPoint1: CGPoint(x: group.minX + 0.73961 * group.width, y: group.minY + 0.64189 * group.height), controlPoint2: CGPoint(x: group.minX + 0.77060 * group.width, y: group.minY + 0.68496 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.86058 * group.width, y: group.minY + 0.62080 * group.height), controlPoint1: CGPoint(x: group.minX + 0.78710 * group.width, y: group.minY + 0.67912 * group.height), controlPoint2: CGPoint(x: group.minX + 0.81635 * group.width, y: group.minY + 0.62641 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.97470 * group.width, y: group.minY + 0.66186 * group.height), controlPoint1: CGPoint(x: group.minX + 0.91242 * group.width, y: group.minY + 0.60811 * group.height), controlPoint2: CGPoint(x: group.minX + 0.95010 * group.width, y: group.minY + 0.63493 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.88456 * group.width, y: group.minY + 0.90887 * group.height), controlPoint1: CGPoint(x: group.minX + 1.04999 * group.width, y: group.minY + 0.77810 * group.height), controlPoint2: CGPoint(x: group.minX + 0.93844 * group.width, y: group.minY + 0.86608 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.77763 * group.width, y: group.minY + 0.99790 * group.height), controlPoint1: CGPoint(x: group.minX + 0.81524 * group.width, y: group.minY + 0.96786 * group.height), controlPoint2: CGPoint(x: group.minX + 0.77763 * group.width, y: group.minY + 0.99790 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.67049 * group.width, y: group.minY + 0.91216 * group.height), controlPoint1: CGPoint(x: group.minX + 0.77763 * group.width, y: group.minY + 0.99790 * group.height), controlPoint2: CGPoint(x: group.minX + 0.73270 * group.width, y: group.minY + 0.96622 * group.height))
        bezierPath.close()
        fillColor.setStroke()
        bezierPath.lineWidth = 0.5
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
    }

    //WARNING: Drawing method for 'Mic' cannot be generated due to Trial limits.

    //// Generated Images

    @objc dynamic public class func imageOfEvents(imageSize: CGSize = CGSize(width: 28, height: 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            StyleKit.drawEvents(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))

        let imageOfEvents = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfEvents
    }

    //WARNING: Image method for 'Mic' cannot be generated due to Trial limits.

}
